/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import AST.*;
import java.io.PrintWriter;

parser code 
{:
	public Lexer lexer;
	public boolean errorInLexer = false;
	public PrintWriter fileWriter;

	public Parser(Lexer lexer, PrintWriter fileWriter)
	{
		super(lexer);
		this.lexer = lexer;
		this.fileWriter = fileWriter;
	}
	public void report_error(String message, Object info)
	{
		if(errorInLexer){
			fileWriter.write("ERROR\n");
		}
		else{
			fileWriter.write("ERROR("+lexer.getLine()+")\n");
		}
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		fileWriter.close();
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	if(s.sym == TokenNames.error){
		errorInLexer = true;
	}
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal IF;
terminal EQ;
terminal DOT;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal WHILE;
terminal DIVIDE;
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal SEMICOLON;
terminal ASSIGN;
terminal TYPE_INT;
terminal TYPE_STRING;
terminal TYPE_VOID;
terminal ARRAY;
terminal COMMA;
terminal CLASS;
terminal EXTENDS;
terminal NIL;
terminal RETURN;
terminal NEW;
terminal LT;
terminal GT;
terminal COMMENT;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;



/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_EXP exp;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_PROGRAM program;
non terminal AST_DECLARATION dec;
non terminal AST_TYPE typei;
non terminal AST_VARDEC varDec;
non terminal AST_FUNCDEC funcDec;
non terminal AST_CLASSDEC classDec;
non terminal AST_ARRAY_TYPEDEF arrayTypedef;
non terminal AST_NEW_EXP newExp;
non terminal AST_CFIELD cField;
non terminal AST_BINOP BINOP;
non terminal AST_TYPE_AND_ID typeID;
non terminal AST_VAR_AND_DOT varDot;
non terminal AST_FUNC_ARGS funcArgs;
non terminal AST_CFIELD_LIST cFieldList;
non terminal AST_CALL_FUNC callFunc;
non terminal AST_EXP_ARGS expArgs;



/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence nonassoc ASSIGN;
precedence left EQ;
precedence left LT, GT;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence nonassoc LBRACK;
precedence nonassoc LPAREN;
precedence left DOT;

/************************/
/* START WITH: program */
/************************/
start with program;

/********************/
/* DERIVATION RULES */
/********************/

program		::=		dec:declar							{: RESULT = new AST_PROGRAM_LIST(declar, null);          :}		
					| dec:declar program:prog			{: RESULT = new AST_PROGRAM_LIST(declar, prog);          :}
					;

dec			::= 	varDec:vd 							{: RESULT = new AST_DECLARATION_VARDEC(vd);          :}
					| funcDec:fd						{: RESULT = new AST_DECLARATION_FUNC_DEC(fd);          :}
					| classDec:cd 						{: RESULT = new AST_DECLARATION_CLASS_DEC(cd);          :}
					| arrayTypedef:atd 					{: RESULT = new AST_DECLARATION_ARRAY_TYPEDEF(atd);          :}
					| COMMENT
					;

typei		::=		TYPE_INT							{: RESULT = new AST_TYPE_TYPEINT();          :}
					| TYPE_STRING						{: RESULT = new AST_TYPE_TYPESTRING();          :}
					| TYPE_VOID							{: RESULT = new AST_TYPE_TYPEVOID();          :}
					| ID:typeName						{: RESULT = new AST_TYPE_TYPEID(typeName);          :}
					;

arrayTypedef ::=	ARRAY ID:name EQ typei:typ LBRACK RBRACK SEMICOLON 		{: RESULT = new AST_ARRAY_TYPEDEF_SINGLE(name, typ);          :}
					;

varDec		::=		typeID:typAndId SEMICOLON 					{: RESULT = new AST_VARDEC_TYPE_AND_ID(typAndId);          :}
					| typeID:typAndId ASSIGN exp:ex SEMICOLON				{: RESULT = new AST_VARDEC_TYPE_AND_ID_EXP(typAndId, ex);          :}
					| typeID:typAndId ASSIGN newExp:nex SEMICOLON			{: RESULT = new AST_VARDEC_TYPE_AND_ID_NEW_EXP(typAndId, nex);          :}
					;

funcDec 	::=		typeID:typAndId LPAREN RPAREN LBRACE stmtList:body RBRACE 	{: RESULT = new AST_FUNCDEC_NO_ARGS(typAndId, body);          :}
					| typeID:typAndId LPAREN funcArgs:args RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_FUNCDEC_WITH_ARGS(typAndId, args, body);          :}
					;

classDec	::=		CLASS ID:name LBRACE cFieldList:body RBRACE			{: RESULT = new AST_CLASSDEC_SIMPLE(name, body);          :}
					| CLASS ID:name EXTENDS ID:sup LBRACE cFieldList:body RBRACE	{: RESULT = new AST_CLASSDEC_INHERITANCE(name, sup, body);          :}
					;

exp			::=		var:v								{: RESULT = new AST_EXP_VAR(v);          :}
					| LPAREN exp:e RPAREN				{: RESULT = new AST_EXP_IN_PARENTHESIS(e);          :}
					| exp:e1 BINOP:op exp:e2			{: RESULT = new AST_EXP_BINOP(e1, op, e2);			:}
					| callFunc:f						{: RESULT = new AST_EXP_FUNCTION_CALL(f);          :}
					| MINUS INT:i 						{: RESULT = new AST_EXP_NEGATIVE_INT(-i);          :}
					| INT:i 							{: RESULT = new AST_EXP_INT(i);          :}
					| NIL								{: RESULT = new AST_EXP_NIL();          :}
					| STRING:s							{: RESULT = new AST_EXP_STRING(s);          :}
					;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| varDot:vd ID:fieldName			{: RESULT = new AST_VAR_FIELD(vd,fieldName); :}
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :}
					;

stmt		::=		varDec: v								{: RESULT = new AST_STMT_VARDEC(v);		 :}
					| var:v ASSIGN exp:e SEMICOLON			{: RESULT = new AST_STMT_ASSIGN(v,e); :}
					| var:v ASSIGN newExp:ne SEMICOLON		{: RESULT = new AST_STMT_ASSIGN_NEW_EXP(v,ne);		 :}
					| RETURN SEMICOLON						{: RESULT = new AST_STMT_RETURN();		 :}
					| RETURN exp:e SEMICOLON				{: RESULT = new AST_STMT_RETURN_WITH_EXP(e);		 :}
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(   cond,body); :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body); :}
					| callFunc:f SEMICOLON					{: RESULT = new AST_STMT_CALL_FUNC(f); :}		
					| COMMENT
					;

newExp		::=		NEW typei:t								{: RESULT = new AST_NEW_EXP_TYPE(t);		 :}
					| NEW typei:t LBRACK exp:e RBRACK		{: RESULT = new AST_NEW_EXP_TYPE_EXP(t, e);		 :}
					;

cField		::=		varDec:vd								{: RESULT = new AST_CFIELD_VARDEC(vd);		 :}
					| funcDec:fd 							{: RESULT = new AST_CFIELD_FUNCDEC(fd);		 :}
					;

BINOP		::=		PLUS									{: RESULT = new AST_BINOP_OPERATION(0);		 :}
					| MINUS									{: RESULT = new AST_BINOP_OPERATION(1);		 :}
					| TIMES									{: RESULT = new AST_BINOP_OPERATION(2);		 :}
					| DIVIDE								{: RESULT = new AST_BINOP_OPERATION(3);		 :}
					| LT									{: RESULT = new AST_BINOP_OPERATION(4);		 :}
					| GT									{: RESULT = new AST_BINOP_OPERATION(5);		 :}
					| EQ									{: RESULT = new AST_BINOP_OPERATION(6);		 :}
					;

typeID		::=		typei:t ID:name							{: RESULT = new AST_TYPE_AND_ID_SINGLE(t, name);		 :}
					;

varDot 		::=		var:v DOT								{: RESULT = new AST_VAR_AND_DOT_SINGLE(v);		 :}
					;

funcArgs	::=		typeID:ti									{: RESULT = new AST_FUNC_ARGS(ti, null);		 :}
					| typeID:ti COMMA funcArgs:fa				{: RESULT = new AST_FUNC_ARGS(ti, fa);		 :}
					;

stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;

cFieldList	::=		cField:c cFieldList:l
					| cField:c
					;

callFunc	::=		ID:name LPAREN RPAREN							{: RESULT = new AST_CALL_FUNC_NO_ARGS(name);    :}
					| varDot:vd ID:name LPAREN RPAREN				{: RESULT = new AST_CALL_FUNC_VAR_DOT_NO_ARGS(vd, name);    :}
					| ID:name LPAREN expArgs:ea RPAREN				{: RESULT = new AST_CALL_FUNC_WITH_ARGS(name, ea);    :}
					| varDot:vd ID:name LPAREN expArgs:ea RPAREN	{: RESULT = new AST_CALL_FUNC_VAR_DOT_WITH_ARGS(vd, name, ea);    :}
					;

expArgs		::=		exp:e								{: RESULT = new AST_EXP_ARGS(e, null);    :}
					| exp:e COMMA expArgs:ea			{: RESULT = new AST_EXP_ARGS(e, ea);    :}
					;

