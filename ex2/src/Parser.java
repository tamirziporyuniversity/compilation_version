
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import AST.*;
import java.io.PrintWriter;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TokenNames.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\006\003\000\002\006" +
    "\004\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003\000\002\010\003\000\002" +
    "\014\011\000\002\011\004\000\002\011\006\000\002\011" +
    "\006\000\002\012\010\000\002\012\011\000\002\013\007" +
    "\000\002\013\011\000\002\002\003\000\002\002\005\000" +
    "\002\002\005\000\002\002\003\000\002\002\004\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\006\000\002\004\003" +
    "\000\002\004\006\000\002\004\006\000\002\004\004\000" +
    "\002\004\005\000\002\004\011\000\002\004\011\000\002" +
    "\004\004\000\002\004\003\000\002\015\004\000\002\015" +
    "\007\000\002\016\003\000\002\016\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\020\004\000\002\021\004\000\002\022\003\000\002\022" +
    "\005\000\002\005\004\000\002\005\003\000\002\023\004" +
    "\000\002\023\003\000\002\024\005\000\002\024\006\000" +
    "\002\024\006\000\002\024\007\000\002\025\003\000\002" +
    "\025\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\020\024\005\025\014\026\021\027\006\031" +
    "\022\040\016\042\013\001\002\000\022\002\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\031\ufffd\040\ufffd\042\ufffd\001" +
    "\002\000\010\016\ufff9\022\ufff9\042\ufff9\001\002\000\004" +
    "\042\200\001\002\000\022\002\000\024\005\025\014\026" +
    "\021\027\006\031\022\040\016\042\013\001\002\000\022" +
    "\002\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\031\ufffe\040" +
    "\ufffe\042\ufffe\001\002\000\004\002\176\001\002\000\010" +
    "\014\042\022\041\023\043\001\002\000\010\016\ufff6\022" +
    "\ufff6\042\ufff6\001\002\000\010\016\ufff8\022\ufff8\042\ufff8" +
    "\001\002\000\022\002\ufffb\024\ufffb\025\ufffb\026\ufffb\027" +
    "\ufffb\031\ufffb\040\ufffb\042\ufffb\001\002\000\022\002\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\031\ufffa\040\ufffa\042" +
    "\ufffa\001\002\000\022\002\ufffc\024\ufffc\025\ufffc\026\ufffc" +
    "\027\ufffc\031\ufffc\040\ufffc\042\ufffc\001\002\000\004\042" +
    "\040\001\002\000\010\016\ufff7\022\ufff7\042\ufff7\001\002" +
    "\000\004\042\023\001\002\000\006\020\024\032\025\001" +
    "\002\000\012\024\005\025\014\026\021\042\013\001\002" +
    "\000\004\042\026\001\002\000\004\020\027\001\002\000" +
    "\012\024\005\025\014\026\021\042\013\001\002\000\014" +
    "\021\uffd6\024\uffd6\025\uffd6\026\uffd6\042\uffd6\001\002\000" +
    "\004\021\035\001\002\000\014\021\uffd7\024\uffd7\025\uffd7" +
    "\026\uffd7\042\uffd7\001\002\000\014\021\uffc7\024\005\025" +
    "\014\026\021\042\013\001\002\000\004\021\uffc8\001\002" +
    "\000\022\002\uffee\024\uffee\025\uffee\026\uffee\027\uffee\031" +
    "\uffee\040\uffee\042\uffee\001\002\000\004\021\037\001\002" +
    "\000\022\002\uffef\024\uffef\025\uffef\026\uffef\027\uffef\031" +
    "\uffef\040\uffef\042\uffef\001\002\000\014\014\uffce\015\uffce" +
    "\022\uffce\023\uffce\030\uffce\001\002\000\032\002\ufff4\004" +
    "\ufff4\012\ufff4\021\ufff4\024\ufff4\025\ufff4\026\ufff4\027\ufff4" +
    "\031\ufff4\034\ufff4\040\ufff4\042\ufff4\001\002\000\014\015" +
    "\122\024\005\025\014\026\021\042\013\001\002\000\020" +
    "\010\044\014\056\033\051\035\050\041\045\042\055\043" +
    "\054\001\002\000\004\041\121\001\002\000\030\005\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\013\uffe8\015\uffe8\017\uffe8\022" +
    "\uffe8\030\uffe8\036\uffe8\037\uffe8\001\002\000\030\005\uffea" +
    "\007\uffea\010\uffea\011\uffea\013\uffea\015\uffea\017\uffea\022" +
    "\uffea\030\uffea\036\uffea\037\uffea\001\002\000\004\042\114" +
    "\001\002\000\012\024\005\025\014\026\021\042\013\001" +
    "\002\000\030\005\uffe7\007\uffe7\010\uffe7\011\uffe7\013\uffe7" +
    "\015\uffe7\017\uffe7\022\uffe7\030\uffe7\036\uffe7\037\uffe7\001" +
    "\002\000\004\022\107\001\002\000\022\005\067\007\066" +
    "\010\063\011\072\013\064\022\106\036\073\037\070\001" +
    "\002\000\030\005\uffe6\007\uffe6\010\uffe6\011\uffe6\013\uffe6" +
    "\015\uffe6\017\uffe6\022\uffe6\030\uffe6\036\uffe6\037\uffe6\001" +
    "\002\000\036\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5" +
    "\013\uffe5\014\077\015\uffe5\016\uffe5\017\uffe5\022\uffe5\030" +
    "\uffe5\036\uffe5\037\uffe5\001\002\000\016\010\044\014\056" +
    "\033\051\041\045\042\055\043\054\001\002\000\034\005" +
    "\uffed\006\061\007\uffed\010\uffed\011\uffed\013\uffed\015\uffed" +
    "\016\060\017\uffed\022\uffed\030\uffed\036\uffed\037\uffed\001" +
    "\002\000\016\010\044\014\056\033\051\041\045\042\055" +
    "\043\054\001\002\000\004\042\uffcd\001\002\000\022\005" +
    "\067\007\066\010\063\011\072\013\064\017\071\036\073" +
    "\037\070\001\002\000\016\010\uffd4\014\uffd4\033\uffd4\041" +
    "\uffd4\042\uffd4\043\uffd4\001\002\000\016\010\uffd2\014\uffd2" +
    "\033\uffd2\041\uffd2\042\uffd2\043\uffd2\001\002\000\016\010" +
    "\044\014\056\033\051\041\045\042\055\043\054\001\002" +
    "\000\016\010\uffd5\014\uffd5\033\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\001\002\000\016\010\uffcf\014\uffcf\033\uffcf\041\uffcf" +
    "\042\uffcf\043\uffcf\001\002\000\016\010\uffd0\014\uffd0\033" +
    "\uffd0\041\uffd0\042\uffd0\043\uffd0\001\002\000\036\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\013\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\022\uffe3\023\uffe3\030\uffe3\036\uffe3\037\uffe3" +
    "\001\002\000\016\010\uffd3\014\uffd3\033\uffd3\041\uffd3\042" +
    "\uffd3\043\uffd3\001\002\000\016\010\uffd1\014\uffd1\033\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\001\002\000\030\005\067\007" +
    "\066\010\063\011\072\013\064\015\uffeb\017\uffeb\022\uffeb" +
    "\030\uffeb\036\073\037\070\001\002\000\022\005\067\007" +
    "\066\010\063\011\072\013\064\015\076\036\073\037\070" +
    "\001\002\000\030\005\uffec\007\uffec\010\uffec\011\uffec\013" +
    "\uffec\015\uffec\017\uffec\022\uffec\030\uffec\036\uffec\037\uffec" +
    "\001\002\000\020\010\044\014\056\015\101\033\051\041" +
    "\045\042\055\043\054\001\002\000\024\005\067\007\066" +
    "\010\063\011\072\013\064\015\uffc2\030\104\036\073\037" +
    "\070\001\002\000\030\005\uffc6\007\uffc6\010\uffc6\011\uffc6" +
    "\013\uffc6\015\uffc6\017\uffc6\022\uffc6\030\uffc6\036\uffc6\037" +
    "\uffc6\001\002\000\004\015\103\001\002\000\030\005\uffc4" +
    "\007\uffc4\010\uffc4\011\uffc4\013\uffc4\015\uffc4\017\uffc4\022" +
    "\uffc4\030\uffc4\036\uffc4\037\uffc4\001\002\000\016\010\044" +
    "\014\056\033\051\041\045\042\055\043\054\001\002\000" +
    "\004\015\uffc1\001\002\000\032\002\ufff3\004\ufff3\012\ufff3" +
    "\021\ufff3\024\ufff3\025\ufff3\026\ufff3\027\ufff3\031\ufff3\034" +
    "\ufff3\040\ufff3\042\ufff3\001\002\000\032\002\ufff2\004\ufff2" +
    "\012\ufff2\021\ufff2\024\ufff2\025\ufff2\026\ufff2\027\ufff2\031" +
    "\ufff2\034\ufff2\040\ufff2\042\ufff2\001\002\000\006\016\111" +
    "\022\uffd9\001\002\000\016\010\044\014\056\033\051\041" +
    "\045\042\055\043\054\001\002\000\022\005\067\007\066" +
    "\010\063\011\072\013\064\017\113\036\073\037\070\001" +
    "\002\000\004\022\uffd8\001\002\000\040\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\013\uffe4\014\115\015\uffe4\016" +
    "\uffe4\017\uffe4\022\uffe4\023\uffe4\030\uffe4\036\uffe4\037\uffe4" +
    "\001\002\000\020\010\044\014\056\015\116\033\051\041" +
    "\045\042\055\043\054\001\002\000\030\005\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\013\uffc5\015\uffc5\017\uffc5\022\uffc5\030" +
    "\uffc5\036\uffc5\037\uffc5\001\002\000\004\015\120\001\002" +
    "\000\030\005\uffc3\007\uffc3\010\uffc3\011\uffc3\013\uffc3\015" +
    "\uffc3\017\uffc3\022\uffc3\030\uffc3\036\uffc3\037\uffc3\001\002" +
    "\000\030\005\uffe9\007\uffe9\010\uffe9\011\uffe9\013\uffe9\015" +
    "\uffe9\017\uffe9\022\uffe9\030\uffe9\036\uffe9\037\uffe9\001\002" +
    "\000\004\020\173\001\002\000\006\015\uffcc\030\171\001" +
    "\002\000\004\015\125\001\002\000\004\020\126\001\002" +
    "\000\022\004\135\012\127\024\005\025\014\026\021\034" +
    "\137\040\140\042\136\001\002\000\004\014\163\001\002" +
    "\000\004\022\162\001\002\000\024\004\135\012\127\021" +
    "\uffc9\024\005\025\014\026\021\034\137\040\140\042\136" +
    "\001\002\000\024\004\uffe2\012\uffe2\021\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\034\uffe2\040\uffe2\042\uffe2\001\002\000\006" +
    "\022\041\023\043\001\002\000\004\021\160\001\002\000" +
    "\004\014\152\001\002\000\014\006\uffe5\014\077\016\uffe5" +
    "\023\uffe5\042\ufff6\001\002\000\020\010\044\014\056\022" +
    "\150\033\051\041\045\042\055\043\054\001\002\000\024" +
    "\004\uffda\012\uffda\021\uffda\024\uffda\025\uffda\026\uffda\034" +
    "\uffda\040\uffda\042\uffda\001\002\000\010\006\061\016\060" +
    "\023\142\001\002\000\020\010\044\014\056\033\051\035" +
    "\050\041\045\042\055\043\054\001\002\000\004\022\146" +
    "\001\002\000\022\005\067\007\066\010\063\011\072\013" +
    "\064\022\145\036\073\037\070\001\002\000\024\004\uffe1" +
    "\012\uffe1\021\uffe1\024\uffe1\025\uffe1\026\uffe1\034\uffe1\040" +
    "\uffe1\042\uffe1\001\002\000\024\004\uffe0\012\uffe0\021\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\034\uffe0\040\uffe0\042\uffe0\001" +
    "\002\000\022\005\067\007\066\010\063\011\072\013\064" +
    "\022\151\036\073\037\070\001\002\000\024\004\uffdf\012" +
    "\uffdf\021\uffdf\024\uffdf\025\uffdf\026\uffdf\034\uffdf\040\uffdf" +
    "\042\uffdf\001\002\000\024\004\uffde\012\uffde\021\uffde\024" +
    "\uffde\025\uffde\026\uffde\034\uffde\040\uffde\042\uffde\001\002" +
    "\000\016\010\044\014\056\033\051\041\045\042\055\043" +
    "\054\001\002\000\022\005\067\007\066\010\063\011\072" +
    "\013\064\015\154\036\073\037\070\001\002\000\004\020" +
    "\155\001\002\000\022\004\135\012\127\024\005\025\014" +
    "\026\021\034\137\040\140\042\136\001\002\000\004\021" +
    "\157\001\002\000\024\004\uffdd\012\uffdd\021\uffdd\024\uffdd" +
    "\025\uffdd\026\uffdd\034\uffdd\040\uffdd\042\uffdd\001\002\000" +
    "\024\002\ufff0\021\ufff0\024\ufff0\025\ufff0\026\ufff0\027\ufff0" +
    "\031\ufff0\040\ufff0\042\ufff0\001\002\000\004\021\uffca\001" +
    "\002\000\024\004\uffdb\012\uffdb\021\uffdb\024\uffdb\025\uffdb" +
    "\026\uffdb\034\uffdb\040\uffdb\042\uffdb\001\002\000\016\010" +
    "\044\014\056\033\051\041\045\042\055\043\054\001\002" +
    "\000\022\005\067\007\066\010\063\011\072\013\064\015" +
    "\165\036\073\037\070\001\002\000\004\020\166\001\002" +
    "\000\022\004\135\012\127\024\005\025\014\026\021\034" +
    "\137\040\140\042\136\001\002\000\004\021\170\001\002" +
    "\000\024\004\uffdc\012\uffdc\021\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\034\uffdc\040\uffdc\042\uffdc\001\002\000\012\024\005" +
    "\025\014\026\021\042\013\001\002\000\004\015\uffcb\001" +
    "\002\000\022\004\135\012\127\024\005\025\014\026\021" +
    "\034\137\040\140\042\136\001\002\000\004\021\175\001" +
    "\002\000\024\002\ufff1\021\ufff1\024\ufff1\025\ufff1\026\ufff1" +
    "\027\ufff1\031\ufff1\040\ufff1\042\ufff1\001\002\000\004\002" +
    "\001\001\002\000\004\002\uffff\001\002\000\004\005\201" +
    "\001\002\000\012\024\005\025\014\026\021\042\013\001" +
    "\002\000\004\016\203\001\002\000\004\017\204\001\002" +
    "\000\004\022\205\001\002\000\022\002\ufff5\024\ufff5\025" +
    "\ufff5\026\ufff5\027\ufff5\031\ufff5\040\ufff5\042\ufff5\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\203\000\022\006\010\007\006\010\017\011\007\012" +
    "\003\013\016\014\014\020\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\006\176\007" +
    "\006\010\017\011\007\012\003\013\016\014\014\020\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\017\011\031\012\027\016\032\020\011\023\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\017" +
    "\011\031\012\027\016\032\020\011\023\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\010\017\011\031\012\027\016\032\020\011\023\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\017\020\122\022\123\001\001\000\014\002\052" +
    "\003\056\015\051\021\046\024\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\064\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\002\074\003\056\021\046\024\045\001" +
    "\001\000\002\001\001\000\012\002\061\003\056\021\046" +
    "\024\045\001\001\000\002\001\001\000\004\017\064\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\002\073" +
    "\003\056\021\046\024\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\064\001\001\000" +
    "\004\017\064\001\001\000\002\001\001\000\014\002\077" +
    "\003\056\021\046\024\045\025\101\001\001\000\004\017" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\002\077\003\056\021\046\024\045\025" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\002\111\003\056\021" +
    "\046\024\045\001\001\000\004\017\064\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\077\003\056\021" +
    "\046\024\045\025\116\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\003\140\004\130\005\133\010\017\011\131\020" +
    "\132\021\046\024\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\140\004\130\005\160\010\017\011" +
    "\131\020\132\021\046\024\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\002\146\003\056\021\046\024\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\143\003\056\015\142\021\046\024\045\001\001\000\002" +
    "\001\001\000\004\017\064\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\002\152\003\056\021\046\024" +
    "\045\001\001\000\004\017\064\001\001\000\002\001\001" +
    "\000\022\003\140\004\130\005\155\010\017\011\131\020" +
    "\132\021\046\024\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\002\163\003\056\021\046\024\045\001\001" +
    "\000\004\017\064\001\001\000\002\001\001\000\022\003" +
    "\140\004\130\005\166\010\017\011\131\020\132\021\046" +
    "\024\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\010\017\020\122\022\171\001\001\000\002\001\001" +
    "\000\022\003\140\004\130\005\173\010\017\011\131\020" +
    "\132\021\046\024\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\201\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	if(s.sym == TokenNames.error){
		errorInLexer = true;
	}
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getCharPos());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 

    }


	public Lexer lexer;
	public boolean errorInLexer = false;
	public PrintWriter fileWriter;

	public Parser(Lexer lexer, PrintWriter fileWriter)
	{
		super(lexer);
		this.lexer = lexer;
		this.fileWriter = fileWriter;
	}
	public void report_error(String message, Object info)
	{
		if(errorInLexer){
			fileWriter.write("ERROR\n");
		}
		else{
			fileWriter.write("ERROR("+lexer.getLine()+")\n");
		}
		System.out.print("ERROR >> ");		
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getCharPos());
		System.out.print("] ");		
		fileWriter.close();
		System.exit(0);
	}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_PROGRAM start_val = (AST_PROGRAM)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= dec 
            {
              AST_PROGRAM RESULT =null;
		int declarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_DECLARATION declar = (AST_DECLARATION)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_PROGRAM_LIST(declar, null);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= dec program 
            {
              AST_PROGRAM RESULT =null;
		int declarleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int declarright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_DECLARATION declar = (AST_DECLARATION)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int progleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int progright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_PROGRAM prog = (AST_PROGRAM)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_PROGRAM_LIST(declar, prog);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // dec ::= varDec 
            {
              AST_DECLARATION RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_VARDEC vd = (AST_VARDEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_DECLARATION_VARDEC(vd);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dec ::= funcDec 
            {
              AST_DECLARATION RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_FUNCDEC fd = (AST_FUNCDEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_DECLARATION_FUNC_DEC(fd);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dec ::= classDec 
            {
              AST_DECLARATION RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_CLASSDEC cd = (AST_CLASSDEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_DECLARATION_CLASS_DEC(cd);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dec ::= arrayTypedef 
            {
              AST_DECLARATION RESULT =null;
		int atdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int atdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_ARRAY_TYPEDEF atd = (AST_ARRAY_TYPEDEF)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_DECLARATION_ARRAY_TYPEDEF(atd);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dec ::= COMMENT 
            {
              AST_DECLARATION RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dec",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // typei ::= TYPE_INT 
            {
              AST_TYPE RESULT =null;
		 RESULT = new AST_TYPE_TYPEINT();          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typei",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // typei ::= TYPE_STRING 
            {
              AST_TYPE RESULT =null;
		 RESULT = new AST_TYPE_TYPESTRING();          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typei",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // typei ::= TYPE_VOID 
            {
              AST_TYPE RESULT =null;
		 RESULT = new AST_TYPE_TYPEVOID();          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typei",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // typei ::= ID 
            {
              AST_TYPE RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_TYPE_TYPEID(typeName);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typei",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // arrayTypedef ::= ARRAY ID EQ typei LBRACK RBRACK SEMICOLON 
            {
              AST_ARRAY_TYPEDEF RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int typleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_TYPE typ = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new AST_ARRAY_TYPEDEF_SINGLE(name, typ);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrayTypedef",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // varDec ::= typeID SEMICOLON 
            {
              AST_VARDEC RESULT =null;
		int typAndIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typAndIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_TYPE_AND_ID typAndId = (AST_TYPE_AND_ID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_VARDEC_TYPE_AND_ID(typAndId);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // varDec ::= typeID ASSIGN exp SEMICOLON 
            {
              AST_VARDEC RESULT =null;
		int typAndIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typAndIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_TYPE_AND_ID typAndId = (AST_TYPE_AND_ID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP ex = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_VARDEC_TYPE_AND_ID_EXP(typAndId, ex);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // varDec ::= typeID ASSIGN newExp SEMICOLON 
            {
              AST_VARDEC RESULT =null;
		int typAndIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int typAndIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_TYPE_AND_ID typAndId = (AST_TYPE_AND_ID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nexleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nexright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_NEW_EXP nex = (AST_NEW_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_VARDEC_TYPE_AND_ID_NEW_EXP(typAndId, nex);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDec",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // funcDec ::= typeID LPAREN RPAREN LBRACE stmtList RBRACE 
            {
              AST_FUNCDEC RESULT =null;
		int typAndIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int typAndIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		AST_TYPE_AND_ID typAndId = (AST_TYPE_AND_ID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_STMT_LIST body = (AST_STMT_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_FUNCDEC_NO_ARGS(typAndId, body);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDec",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // funcDec ::= typeID LPAREN funcArgs RPAREN LBRACE stmtList RBRACE 
            {
              AST_FUNCDEC RESULT =null;
		int typAndIdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int typAndIdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		AST_TYPE_AND_ID typAndId = (AST_TYPE_AND_ID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST_FUNC_ARGS args = (AST_FUNC_ARGS)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_STMT_LIST body = (AST_STMT_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_FUNCDEC_WITH_ARGS(typAndId, args, body);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcDec",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // classDec ::= CLASS ID LBRACE cFieldList RBRACE 
            {
              AST_CLASSDEC RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_CFIELD_LIST body = (AST_CFIELD_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_CLASSDEC_SIMPLE(name, body);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // classDec ::= CLASS ID EXTENDS ID LBRACE cFieldList RBRACE 
            {
              AST_CLASSDEC RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int supleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int supright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String sup = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_CFIELD_LIST body = (AST_CFIELD_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_CLASSDEC_INHERITANCE(name, sup, body);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classDec",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // exp ::= var 
            {
              AST_EXP RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_VAR(v);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // exp ::= LPAREN exp RPAREN 
            {
              AST_EXP RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_EXP_IN_PARENTHESIS(e);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // exp ::= exp BINOP exp 
            {
              AST_EXP RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_EXP e1 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_BINOP op = (AST_BINOP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_EXP e2 = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_BINOP(e1, op, e2);			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // exp ::= callFunc 
            {
              AST_EXP RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_CALL_FUNC f = (AST_CALL_FUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_FUNCTION_CALL(f);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= MINUS INT 
            {
              AST_EXP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_NEGATIVE_INT(-i);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= INT 
            {
              AST_EXP RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_INT(i);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= NIL 
            {
              AST_EXP RESULT =null;
		 RESULT = new AST_EXP_NIL();          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= STRING 
            {
              AST_EXP RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_STRING(s);          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // var ::= ID 
            {
              AST_VAR RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_VAR_SIMPLE(name);       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // var ::= varDot ID 
            {
              AST_VAR RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_VAR_AND_DOT vd = (AST_VAR_AND_DOT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fieldNameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fieldNameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String fieldName = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_VAR_FIELD(vd,fieldName); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // var ::= var LBRACK exp RBRACK 
            {
              AST_VAR RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_VAR_SUBSCRIPT(v,e);     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= varDec 
            {
              AST_STMT RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_VARDEC v = (AST_VARDEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_STMT_VARDEC(v);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= var ASSIGN exp SEMICOLON 
            {
              AST_STMT RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_STMT_ASSIGN(v,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= var ASSIGN newExp SEMICOLON 
            {
              AST_STMT RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int neleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int neright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_NEW_EXP ne = (AST_NEW_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_STMT_ASSIGN_NEW_EXP(v,ne);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= RETURN SEMICOLON 
            {
              AST_STMT RESULT =null;
		 RESULT = new AST_STMT_RETURN();		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= RETURN exp SEMICOLON 
            {
              AST_STMT RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_STMT_RETURN_WITH_EXP(e);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= IF LPAREN exp RPAREN LBRACE stmtList RBRACE 
            {
              AST_STMT RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST_EXP cond = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_STMT_LIST body = (AST_STMT_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_STMT_IF(   cond,body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= WHILE LPAREN exp RPAREN LBRACE stmtList RBRACE 
            {
              AST_STMT RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST_EXP cond = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_STMT_LIST body = (AST_STMT_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_STMT_WHILE(cond,body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= callFunc SEMICOLON 
            {
              AST_STMT RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_CALL_FUNC f = (AST_CALL_FUNC)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_STMT_CALL_FUNC(f); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= COMMENT 
            {
              AST_STMT RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // newExp ::= NEW typei 
            {
              AST_NEW_EXP RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_NEW_EXP_TYPE(t);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("newExp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // newExp ::= NEW typei LBRACK exp RBRACK 
            {
              AST_NEW_EXP RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_NEW_EXP_TYPE_EXP(t, e);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("newExp",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // cField ::= varDec 
            {
              AST_CFIELD RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_VARDEC vd = (AST_VARDEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_CFIELD_VARDEC(vd);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cField",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // cField ::= funcDec 
            {
              AST_CFIELD RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_FUNCDEC fd = (AST_FUNCDEC)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_CFIELD_FUNCDEC(fd);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cField",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BINOP ::= PLUS 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP_OPERATION(0);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BINOP ::= MINUS 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP_OPERATION(1);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BINOP ::= TIMES 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP_OPERATION(2);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BINOP ::= DIVIDE 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP_OPERATION(3);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BINOP ::= LT 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP_OPERATION(4);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BINOP ::= GT 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP_OPERATION(5);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BINOP ::= EQ 
            {
              AST_BINOP RESULT =null;
		 RESULT = new AST_BINOP_OPERATION(6);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BINOP",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // typeID ::= typei ID 
            {
              AST_TYPE_AND_ID RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_TYPE t = (AST_TYPE)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_TYPE_AND_ID_SINGLE(t, name);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("typeID",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // varDot ::= var DOT 
            {
              AST_VAR_AND_DOT RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_VAR v = (AST_VAR)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_VAR_AND_DOT_SINGLE(v);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("varDot",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // funcArgs ::= typeID 
            {
              AST_FUNC_ARGS RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_TYPE_AND_ID ti = (AST_TYPE_AND_ID)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_FUNC_ARGS(ti, null);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // funcArgs ::= typeID COMMA funcArgs 
            {
              AST_FUNC_ARGS RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_TYPE_AND_ID ti = (AST_TYPE_AND_ID)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int faright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_FUNC_ARGS fa = (AST_FUNC_ARGS)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_FUNC_ARGS(ti, fa);		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcArgs",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // stmtList ::= stmt stmtList 
            {
              AST_STMT_LIST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_STMT s = (AST_STMT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_STMT_LIST l = (AST_STMT_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_STMT_LIST(s,l);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // stmtList ::= stmt 
            {
              AST_STMT_LIST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_STMT s = (AST_STMT)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_STMT_LIST(s,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmtList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // cFieldList ::= cField cFieldList 
            {
              AST_CFIELD_LIST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_CFIELD c = (AST_CFIELD)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_CFIELD_LIST l = (AST_CFIELD_LIST)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cFieldList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // cFieldList ::= cField 
            {
              AST_CFIELD_LIST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_CFIELD c = (AST_CFIELD)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("cFieldList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // callFunc ::= ID LPAREN RPAREN 
            {
              AST_CALL_FUNC RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new AST_CALL_FUNC_NO_ARGS(name);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callFunc",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // callFunc ::= varDot ID LPAREN RPAREN 
            {
              AST_CALL_FUNC RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		AST_VAR_AND_DOT vd = (AST_VAR_AND_DOT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new AST_CALL_FUNC_VAR_DOT_NO_ARGS(vd, name);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callFunc",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // callFunc ::= ID LPAREN expArgs RPAREN 
            {
              AST_CALL_FUNC RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP_ARGS ea = (AST_EXP_ARGS)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_CALL_FUNC_WITH_ARGS(name, ea);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callFunc",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // callFunc ::= varDot ID LPAREN expArgs RPAREN 
            {
              AST_CALL_FUNC RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		AST_VAR_AND_DOT vd = (AST_VAR_AND_DOT)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AST_EXP_ARGS ea = (AST_EXP_ARGS)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AST_CALL_FUNC_VAR_DOT_WITH_ARGS(vd, name, ea);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("callFunc",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expArgs ::= exp 
            {
              AST_EXP_ARGS RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_ARGS(e, null);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expArgs",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expArgs ::= exp COMMA expArgs 
            {
              AST_EXP_ARGS RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		AST_EXP e = (AST_EXP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int ealeft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int earight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		AST_EXP_ARGS ea = (AST_EXP_ARGS)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AST_EXP_ARGS(e, ea);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expArgs",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
